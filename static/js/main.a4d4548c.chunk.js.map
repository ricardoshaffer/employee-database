{"version":3,"sources":["components/navbar.js","components/search-function.js","utilities/api-employees.js","components/table-header.js","components/results-function.js","components/container.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","collapseOnSelect","expand","className","sticky","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","SearchForm","props","htmlFor","onChange","handleInputChange","value","type","name","list","placeholder","onClick","handleSearch","axios","get","TableHeader","fluid","Row","Col","sortByName","results","map","result","key","login","uuid","src","picture","medium","title","first","last","alt","cell","Results","state","search","employees","employeeSort","order","filtereds","sortFunction","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","preventDefault","includes","this","Component","FormContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a4d4548c.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Link, Route } from \"react-router-dom\";\nimport '../App.css';\nimport Container from 'react-bootstrap/Container';\n\n\n\nfunction NavBar() {\n  return (\n<>\n\n<Navbar collapseOnSelect expand=\"sm\" className=\"custom-nav\" sticky=\"top\">\n<Container><Navbar.Brand href=\"/\">employee DB</Navbar.Brand>  </Container>\n    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n     <Navbar.Collapse id=\"responsive-navbar-nav\">\n      <Nav className=\"mr-auto\">\n      </Nav>\n      </Navbar.Collapse>\n  </Navbar>\n\n  </>\n  )\n}\n \nexport default NavBar;","import React from \"react\";\nimport \"../App.css\";\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(props) {\n  return (\n    <form className=\"search sticky-top\">\n      <div className=\"form-group\">\n        <label htmlFor=\"employees\">search:</label>\n        <input\n            onChange={props.handleInputChange}\n            value={props.value}\n            id=\"employees\"\n            type=\"text\"\n            name=\"search\"\n            list=\"employee\"\n            className=\"inputBox\"\n            placeholder=\"first name\"\n        />\n        <button type=\"submit\" onClick={props.handleSearch} className=\"btn btn-custom\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import axios from \"axios\";\nexport default {\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=50&nat=us\");\n    }\n};","import React from \"react\";\nimport '../App.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nfunction TableHeader(props) {\n    return (\n        <>\n      <Container fluid>\n          <thead className=\"\">\n              <Row className=\"employee-row sticky-top\">\n                  <Col></Col>\n                  <Col className=\"hover-pointer heading\" onClick={props.sortByName}>Name</Col>\n                  <Col className=\"heading\">Phone</Col>\n              </Row>\n          </thead>\n          <tbody className=\"employee-row\">\n              {props.results.map(result => (\n                  <Row key={result.login.uuid} className=\"employee-row\">\n                      <Col> <img\n                      src={result.picture.medium} title={result.name.first + \" \" + result.name.last} alt={result.name.first + \" \" + result.name.last} /></Col>\n                      <Col>{result.name.first + \" \" + result.name.last}  </Col>\n                      <Col>{result.cell}</Col>\n                  </Row>\n              ))}\n          </tbody>\n      </Container >\n      </>\n  )\n}\n\n\nexport default TableHeader","import API from \"../utilities/api-employees\";\nimport React, { Component } from \"react\"\nimport SearchForm from \"./search-function\"\nimport TableHeader from \"./table-header\";\n\n\nclass Results extends Component {\n    state = {\n        search: \"\",\n        employees: [],\n        employeeSort: [],\n        order: \"\"\n\n    };\n    componentDidMount() {\n        API.getUsers().then(res => this.setState({\n            employees: res.data.results,\n            employeeSort: res.data.results\n        })).catch(err => console.log(err))\n    }\n\n    sortByName = () => {\n        const filtereds = this.state.employeeSort;\n        if (this.state.order === \"ascending\") {\n            const sortFunction = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\n            console.log(sortFunction)\n\n            this.setState({\n                employeeSort: sortFunction,\n                order: \"descending\"\n            })\n        } else {\n\n            const sortFunction = filtereds.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\n\n            this.setState({\n                employeeSort: sortFunction,\n                order: \"ascending\"\n            })\n\n        }\n    }\n    render() {\n        return (\n            <div>\n                <SearchForm\n                    employee={this.state.employees}\n                    handleSearch={this.handleSearch}\n                    handleInputChange={this.handleInputChange} />\n                <TableHeader results={this.state.employeeSort}\n                    sortByName={this.sortByName}\n                />\n            </div >\n        )\n    }\n    handleInputChange = event => {\n\n        const employees = this.state.employees;\n        const UserInput = event.target.value;\n        const employeeSort = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\n        )\n        this.setState({\n            employeeSort,\n        });\n    };\n    employeeSearch = () => {\n        API.getUsers()\n            .then(res => this.setState({\n                employeeSort: res.data.results,\n                employees: res.data.results\n            }))\n            .catch(err => console.log(err))\n    }\n    handleSearch = event => {\n        event.preventDefault();\n        const { employees, search } = this.state;\n        const employeeSort = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\n\n        this.setState({\n            employeeSort\n        });\n    }\n}\n\nexport default Results","import React from \"react\";\nimport \"../App.css\";\nimport Container from 'react-bootstrap/Container';\nimport { Link, Route } from \"react-router-dom\";\nimport SearchForm from \"./search-function\";\nimport Results from './results-function';\nfunction FormContainer(props) {\n  return (\n      <>\n  <Container fluid className=\"form-neo\" {...props}>\n  <Results />\n  </Container>\n    \n    </>\n  )\n  \n}\n\nexport default FormContainer;\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/navbar';\nimport FormContainer from './components/container'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n    <div>\n      <NavBar />\n      <FormContainer />\n    </div>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}